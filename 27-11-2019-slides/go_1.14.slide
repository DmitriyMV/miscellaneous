Go 1.14
What’s coming...
30 Nov 2019
Tags: Go1.14, Go, preemptive, logging

Dmitry Matrenichev
Senior Go Developer, TradingView

* Overview

- Go 1.14 is still (at least) 3 months away
- Some of the features are not yet in stone
- Yet we can get the glimpse of the future

* Changes to the language

* Still No Generics™

* Permit embedding of interfaces with overlapping method sets

- Two interfaces
- Both have the method with the same signature
- Both embedded in another (third) interface
- Invalid in Go 1.13
- Valid starting from Go 1.14
- Proposal: [[https://github.com/golang/proposal/blob/master/design/6977-overlapping-interfaces.md][6977-overlapping-interfaces]]
- [[https://github.com/golang/go/issues/6977][issues/6977]]

* Interfaces with overlapping method sets (example for 1.13)

.play overlap/main.go /type ReadWriteCloser/,/^}/

.play do-not-overlap/main.go /type ReadWriteCloser/,/^}/

* Major changes

* Non-cooperative goroutine preemption

- Go programs up to 1.13 can only switch context at predefined spots
- GC also can only start when all goroutines has yield the CPU
- This can lead to spikes in latency and *bizzare* deadlocks
- Solved by Go 1.14 new runtime
- Proposal: [[https://github.com/golang/proposal/blob/master/design/24543-non-cooperative-preemption.md][24543-non-cooperative-preemption]]
- [[https://github.com/golang/go/issues/24543][issues/24543]]

* Bizzare deadlock example

.play deadlock/main.go /func main()/,/^}/

* Another bizzare deadlock

.play deadlock_v2/main.go /func main()/,/^}/

* Low-cost defers via inline code

- Defers allow us close resources cleanly
- but they wre not free...
- Around 30 ns at Go 1.13
- Around 1 ns at Go 1.14 (happy path)
- defers inside for/if statements are *not* *inlined*
- Proposal: [[https://github.com/golang/proposal/blob/master/design/34481-opencoded-defers.md][34481-opencoded-defers]]
- [[https://github.com/golang/go/issues/34481][issues/34481]]

* Scaling the Go page allocator

- Faster memory allocations (around *30%*)
- Make them more cache-friendly, branch-predictor friendly
- [[https://github.com/golang/proposal/blob/master/design/35112-scaling-the-page-allocator.md][35112-scaling-the-page-allocator]]

* Minor changes

* Make timers faster

- Programs with a lot of timers no longer eat most of the CPU time.
  name                      old time/op  new time/op  delta
  AfterFunc-12              1.57ms ± 1%  0.07ms ± 1%  -95.42%
  After-12                  1.63ms ± 3%  0.11ms ± 1%  -93.54%
  Stop-12                   78.3µs ± 3%  73.6µs ± 3%   -6.01%
  SimultaneousAfterFunc-12   138µs ± 1%   111µs ± 1%  -19.57%
  StartStop-12              28.7µs ± 1%  31.5µs ± 5%   +9.64%
  Reset-12                  6.78µs ± 1%  4.24µs ± 7%  -37.45%
  Sleep-12                   183µs ± 1%   125µs ± 1%  -31.67%
  Ticker-12                 5.40ms ± 2%  0.03ms ± 1%  -99.43%
- Timers no longer use separate goroutine
- [[https://github.com/golang/go/issues/6239][issues/6239]]

* Make Mutex faster

- Mutex scales badly with increasing number of CPU cores
- In _starving_ mode give gorotuine CPU time as soon as we can
- [[https://github.com/golang/go/issues/33747][issues/33747]]

* Remove SSLv3

- It's time to update your old Nginx/Apache servers!
- [[https://github.com/golang/go/issues/32716][issues/32716]]

* Stream t.Log output as it happens

- No more waiting for tests to end!
- [[https://github.com/golang/go/issues/24929][issues/24929]]

* Cleanup method to testing package
- The testing package now supports cleanup functions, called after a test or benchmark has finished, by calling `T.Cleanup`
- [[https://github.com/golang/go/issues/32111][issues/32111]]

* Hasher and Seed for hashing user data
- Use runtime hash for strings\bytes
- Its *really* fast (used by hashmap implementation internally)
- [[https://github.com/golang/go/issues/28322][issues/28322]]

* Automatically check and use vendored packages

- No need for `-mod=vendor` in modules mode for vendored packages
- [[https://github.com/golang/go/issues/33848][issues/33848]]

* Fail tests that invoke os.Exit(0) explicitly (not yet)

- New flag: `panicexit0` for `go test`
- Panics if Go code tries to use `os.Exit` during tests
- [[https://github.com/golang/go/issues/29062][issues/29062]]

* add GOINSECURE for insecure dependencies

- Modules and NOSSL do not mix before Go 1.14
- But sometimes we really need it
- New flag: `GOINSECURE` with a list of wildcarded host names
- [[https://github.com/golang/go/issues/32966][issues/32966]]

* Deprecate darwin/386

- MacOS 1.15 does not support x86 anyway
- [[https://github.com/golang/go/issues/34749][issues/34749]]

* os.UserHomeDir
- Gets user Home Dir
- [[https://github.com/golang/go/issues/26463][issues/26463]]
